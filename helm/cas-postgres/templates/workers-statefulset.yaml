{{- if .Values.citus.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "cas-postgres.fullname" . }}-worker
  labels:
    app: {{ template "cas-postgres.name" . }}
    component: worker
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "cas-postgres.name" . }}
      component: worker
      release: {{ .Release.Name }}
  serviceName: {{ template "cas-postgres.fullname" . }}-workers
  replicas: {{ .Values.citus.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "cas-postgres.name" . }}
        component: worker
        release: {{ .Release.Name }}
    spec:
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 3600
      containers:
        - name: {{ template "cas-postgres.fullname" . }}-worker
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          lifecycle:
            postStart:
              exec:
                command:
                  - /usr/bin/env
                  - bash
                  - -c
                  - |
                    if [ "${POD_IP}" ]; then
                      i=1;
                      tries=10;
                      # wait for the worker node to be healthy before registering it with the citus master
                      until /usr/libexec/check-container; do
                        sleep 1;
                        if [ $i -gt $tries ]; then
                          exit 1;
                        fi;
                        i=$((i+1));
                      done;
                      i=1;
                      # idempotently register the worker node with the citus master
                      until psql -qtA -v "ON_ERROR_STOP=1" --host={{ template "cas-postgres.fullname" . }} --username=postgres --command="SELECT * FROM master_add_node('${HOSTNAME}.{{ template "cas-postgres.fullname" . }}-workers', {{ .Values.service.port }})"; do
                        sleep 1;
                        if [ $i -gt $tries ]; then
                          exit 2;
                        fi;
                        i=$((i+1));
                      done;
                      i=1;
                      # enable queries to be routed to the worker node from the citus master
                      # this is necessary if master_disable_node() was previously called for this worker
                      until psql -qtA -v "ON_ERROR_STOP=1" --host={{ template "cas-postgres.fullname" . }} --username=postgres --command="SELECT * FROM master_activate_node('${HOSTNAME}.{{ template "cas-postgres.fullname" . }}-workers', {{ .Values.service.port }})"; do
                        sleep 1;
                        if [ $i -gt $tries ]; then
                          exit 3;
                        fi;
                        i=$((i+1));
                      done;
                    fi;
            preStop:
              exec:
                command:
                  - /usr/bin/env
                  - bash
                  - -c
                  - |
                    # disable queries from the citus master to be routed to the worker node
                    i=1;
                    tries=10;
                    until psql -qtA -v "ON_ERROR_STOP=1" --host={{ template "cas-postgres.fullname" . }} --username=postgres --command="SELECT * FROM master_disable_node('${HOSTNAME}.${PREFIX}postgres-workers', 5432)"; do
                      if [ $i -gt $tries ]; then
                          break;
                      fi;
                      i=$((i+1));
                      sleep 1;
                    done;
                    # gracefully shut down the worker node once it has been disabled
                    pg_ctl stop;
          ports:
            - name: postgresql
              containerPort: {{ .Values.service.port }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name:  {{ template "cas-postgres.fullname" . }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name:  {{ template "cas-postgres.fullname" . }}
            - name: PGDATA
              value: /var/lib/pgsql/data/userdata
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
            - name:  {{ template "cas-postgres.fullname" . }}-worker
              mountPath: /var/lib/pgsql/data
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          resources:
{{ toYaml .Values.resources | indent 12 }}
  volumeClaimTemplates:
    - metadata:
        name:  {{ template "cas-postgres.fullname" . }}-worker
      spec:
{{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
{{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
{{- end }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}

{{- end }}
