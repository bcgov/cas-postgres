apiVersion: template.openshift.io/v1
kind: Template

parameters:
  - description: Prefix to prepend to object name.
    displayName: Prefix
    name: PREFIX
    required: true
  - description: SHA1 of git revision to be deployed.
    displayName: Git SHA1
    name: GIT_SHA1
    required: true
  - description: Openshift project name
    displayName: Project
    name: OC_PROJECT
    required: true
  - description: Openshift registry URL
    displayName: Registry
    name: OC_REGISTRY
    required: true
  - description: Number of postgresql worker nodes
    displayName: Workers
    required: false
    value: "0"
    name: POSTGRESQL_WORKERS
  - description: Requested CPU
    displayName: CPU request
    name: WORKER_CPU_REQUEST
    required: true
  - description: Maximum CPU
    displayName: CPU limit
    name: WORKER_CPU_LIMIT
    required: true
  - description: Requested memory
    displayName: Memory request
    name: WORKER_MEMORY_REQUEST
    required: true
  - description: Maximum memory
    displayName: Memory limit
    name: WORKER_MEMORY_LIMIT
    required: true

objects:
  - apiVersion: apps/v1beta2
    kind: StatefulSet
    metadata:
      name: ${PREFIX}postgres-worker
    spec:
      selector:
        matchLabels:
          app: ${PREFIX}postgres-workers
      serviceName: ${PREFIX}postgres-workers
      replicas: "${{POSTGRESQL_WORKERS}}"
      template:
        metadata:
          labels:
            app: ${PREFIX}postgres-workers
        spec:
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          terminationGracePeriodSeconds: 3600
          containers:
            - name: ${PREFIX}postgres-worker
              image: ${OC_REGISTRY}/${OC_PROJECT}/${PREFIX}postgres:${GIT_SHA1}
              imagePullPolicy: IfNotPresent
              lifecycle:
                postStart:
                  exec:
                    command:
                      - /usr/bin/env
                      - bash
                      - -c
                      - |
                        if [ "${POD_IP}" ]; then
                          # wait for the worker node to be healthy before registering it with the citus master
                          until /usr/libexec/check-container; do
                            sleep 1;
                          done;
                          # idempotently register the worker node with the citus master
                          until psql -qtA -v "ON_ERROR_STOP=1" --host=${PREFIX}postgres-master --username=postgres --command="SELECT * FROM master_add_node('${HOSTNAME}.${PREFIX}postgres-workers', 5432)"; do
                            sleep 1;
                          done;
                          # enable queries to be routed to the worker node from the citus master
                          # this is necessary if master_disable_node() was previously called for this worker
                          until psql -qtA -v "ON_ERROR_STOP=1" --host=${PREFIX}postgres-master --username=postgres --command="SELECT * FROM master_activate_node('${HOSTNAME}.${PREFIX}postgres-workers', 5432)"; do
                            sleep 1;
                          done;
                        fi;
                preStop:
                  exec:
                    command:
                      - /usr/bin/env
                      - bash
                      - -c
                      - |
                        # disable queries from the citus master to be routed to the worker node
                        until psql -qtA -v "ON_ERROR_STOP=1" --host=${PREFIX}postgres-master --username=postgres --command="SELECT * FROM master_disable_node('${HOSTNAME}.${PREFIX}postgres-workers', 5432)"; do
                          sleep 1;
                        done;
                        # gracefully shut down the worker node once it has been disabled
                        pg_ctl stop;
              ports:
                - containerPort: 5432
              env:
                - name: POD_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: postgresqlAdminPassword
                      name: ${PREFIX}postgres-master
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: postgresqlAdminPassword
                      name: ${PREFIX}postgres-master
                - name: PGDATA
                  value: /var/lib/pgsql/data/userdata
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - name: ${PREFIX}postgres-worker
                  mountPath: /var/lib/pgsql/data
              readinessProbe:
                exec:
                  command:
                    - /usr/libexec/check-container
                initialDelaySeconds: 5
                timeoutSeconds: 1
              livenessProbe:
                exec:
                  command:
                    - /usr/libexec/check-container
                    - --live
                initialDelaySeconds: 120
                timeoutSeconds: 10
              resources:
                limits:
                  cpu: ${WORKER_CPU_LIMIT}
                  memory: ${WORKER_MEMORY_LIMIT}
                requests:
                  cpu: ${WORKER_CPU_REQUEST}
                  memory: ${WORKER_MEMORY_REQUEST}
      volumeClaimTemplates:
        - metadata:
            name: ${PREFIX}postgres-worker
          spec:
            storageClassName: gluster-file-db
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 20Gi
